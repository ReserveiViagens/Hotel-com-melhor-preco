#!/bin/bash

# ========================================
# SCRIPT DE DEPLOY AUTOMATIZADO - RESERVEI VIAGENS
# ========================================

set -e

echo "üöÄ Iniciando deploy em produ√ß√£o..."

# ========================================
# CONFIGURA√á√ïES
# ========================================
PROJECT_NAME="reservei-viagens"
VERCEL_TOKEN="${VERCEL_TOKEN}"
VERCEL_ORG_ID="${VERCEL_ORG_ID}"
VERCEL_PROJECT_ID="${VERCEL_PROJECT_ID}"
SLACK_WEBHOOK_URL="${SLACK_WEBHOOK_URL}"

# ========================================
# FUN√á√ïES DE UTILIDADE
# ========================================
send_slack_notification() {
    local message="$1"
    local color="$2"
    
    if [ -n "$SLACK_WEBHOOK_URL" ]; then
        curl -X POST "$SLACK_WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "{
                \"text\": \"$message\",
                \"attachments\": [{
                    \"color\": \"$color\",
                    \"fields\": [
                        {\"title\": \"Projeto\", \"value\": \"$PROJECT_NAME\", \"short\": true},
                        {\"title\": \"Timestamp\", \"value\": \"$(date)\", \"short\": true}
                    ]
                }]
            }"
    fi
}

# ========================================
# PR√â-DEPLOY
# ========================================
echo "üìã Executando verifica√ß√µes pr√©-deploy..."

# Verificar se estamos na branch correta
if [ "$(git branch --show-current)" != "main" ]; then
    echo "‚ùå Erro: Deploy deve ser feito da branch main"
    send_slack_notification "‚ùå Deploy falhou: Branch incorreta" "danger"
    exit 1
fi

# Verificar se h√° mudan√ßas n√£o commitadas
if [ -n "$(git status --porcelain)" ]; then
    echo "‚ùå Erro: H√° mudan√ßas n√£o commitadas"
    send_slack_notification "‚ùå Deploy falhou: Mudan√ßas n√£o commitadas" "danger"
    exit 1
fi

# Verificar depend√™ncias
echo "üì¶ Verificando depend√™ncias..."
npm ci --production=false

# Executar testes
echo "üß™ Executando testes..."
npm run test

# Executar linting
echo "üîç Executando linting..."
npm run lint

# Verificar tipos TypeScript
echo "üìù Verificando tipos TypeScript..."
npm run type-check

# ========================================
# BACKUP ANTES DO DEPLOY
# ========================================
echo "üíæ Criando backup antes do deploy..."

# Backup do banco de dados
if [ -n "$DATABASE_URL" ]; then
    echo "üóÑÔ∏è Backup do banco de dados..."
    npx prisma db push --force-reset
    npx prisma generate
fi

# ========================================
# BUILD DA APLICA√á√ÉO
# ========================================
echo "üî® Build da aplica√ß√£o..."

# Limpar cache
rm -rf .next
rm -rf node_modules/.cache

# Build da aplica√ß√£o
npm run build

# Verificar se o build foi bem-sucedido
if [ ! -d ".next" ]; then
    echo "‚ùå Erro: Build falhou"
    send_slack_notification "‚ùå Deploy falhou: Build falhou" "danger"
    exit 1
fi

echo "‚úÖ Build conclu√≠do com sucesso"

# ========================================
# DEPLOY NO VERCEL
# ========================================
echo "üöÄ Deploy no Vercel..."

if [ -n "$VERCEL_TOKEN" ] && [ -n "$VERCEL_ORG_ID" ] && [ -n "$VERCEL_PROJECT_ID" ]; then
    # Deploy usando Vercel CLI
    npx vercel --prod --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID"
    
    # Obter URL do deploy
    DEPLOY_URL=$(npx vercel ls --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID" | grep "$PROJECT_NAME" | head -1 | awk '{print $2}')
    
    echo "‚úÖ Deploy conclu√≠do: $DEPLOY_URL"
else
    echo "‚ö†Ô∏è Vercel n√£o configurado, pulando deploy autom√°tico"
    DEPLOY_URL="https://reservei-viagens.vercel.app"
fi

# ========================================
# P√ìS-DEPLOY
# ========================================
echo "üîç Verifica√ß√µes p√≥s-deploy..."

# Health check
echo "üè• Health check..."
sleep 30

HEALTH_CHECK_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOY_URL/api/health")

if [ "$HEALTH_CHECK_RESPONSE" = "200" ]; then
    echo "‚úÖ Health check passou"
else
    echo "‚ùå Health check falhou: $HEALTH_CHECK_RESPONSE"
    send_slack_notification "‚ùå Deploy falhou: Health check falhou" "danger"
    exit 1
fi

# Testes de performance
echo "‚ö° Testes de performance..."
npm run lighthouse "$DEPLOY_URL" --output=json --output-path=./lighthouse-report.json

# Verificar m√©tricas de performance
LIGHTHOUSE_SCORE=$(node -e "
const report = require('./lighthouse-report.json');
const score = report.categories.performance.score * 100;
console.log(score);
")

if (( $(echo "$LIGHTHOUSE_SCORE >= 80" | bc -l) )); then
    echo "‚úÖ Performance score: $LIGHTHOUSE_SCORE"
else
    echo "‚ö†Ô∏è Performance score baixo: $LIGHTHOUSE_SCORE"
fi

# ========================================
# NOTIFICA√á√ïES
# ========================================
echo "üì¢ Enviando notifica√ß√µes..."

# Notifica√ß√£o de sucesso
send_slack_notification "‚úÖ Deploy em produ√ß√£o conclu√≠do com sucesso!\nüåê URL: $DEPLOY_URL\n‚ö° Performance: $LIGHTHOUSE_SCORE" "good"

# Notifica√ß√£o por email (se configurado)
if [ -n "$EMAIL_FROM" ] && [ -n "$EMAIL_TO" ]; then
    echo "üìß Enviando email de notifica√ß√£o..."
    # Implementar envio de email aqui
fi

# ========================================
# MONITORAMENTO P√ìS-DEPLOY
# ========================================
echo "üìä Iniciando monitoramento p√≥s-deploy..."

# Monitorar por 5 minutos
for i in {1..10}; do
    echo "Monitoramento $i/10..."
    
    # Verificar status da aplica√ß√£o
    RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOY_URL")
    if [ "$RESPONSE" != "200" ]; then
        echo "‚ö†Ô∏è Aplica√ß√£o retornou status $RESPONSE"
        send_slack_notification "‚ö†Ô∏è Alerta: Aplica√ß√£o retornou status $RESPONSE" "warning"
    fi
    
    sleep 30
done

# ========================================
# FINALIZA√á√ÉO
# ========================================
echo "üéâ Deploy em produ√ß√£o conclu√≠do com sucesso!"
echo "üåê URL: $DEPLOY_URL"
echo "üìä Performance Score: $LIGHTHOUSE_SCORE"
echo "‚è∞ Timestamp: $(date)"

# Limpar arquivos tempor√°rios
rm -f lighthouse-report.json

echo "‚úÖ Script de deploy finalizado" 