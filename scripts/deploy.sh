#!/bin/bash

# ======================================
# SCRIPT DE DEPLOY - RESERVEI VIAGENS
# ======================================

set -e  # Parar em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ]; then
    error "Execute este script na raiz do projeto Reservei Viagens"
    exit 1
fi

log "üöÄ Iniciando deploy para produ√ß√£o..."

# ======================================
# 1. VERIFICA√á√ïES PR√â-DEPLOY
# ======================================

log "üìã Verificando pr√©-requisitos..."

# Verificar se Node.js est√° instalado
if ! command -v node &> /dev/null; then
    error "Node.js n√£o est√° instalado"
    exit 1
fi

# Verificar vers√£o do Node.js (m√≠nimo 18)
NODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
if [ "$NODE_VERSION" -lt 18 ]; then
    error "Node.js vers√£o 18+ √© necess√°ria. Vers√£o atual: $(node -v)"
    exit 1
fi

log "‚úÖ Node.js $(node -v) - OK"

# Verificar se .env.production existe
if [ ! -f ".env.production" ]; then
    warn "Arquivo .env.production n√£o encontrado"
    info "Copiando env.production.example para .env.production"
    cp env.production.example .env.production
    warn "‚ö†Ô∏è  Configure as vari√°veis de ambiente em .env.production antes de continuar"
    exit 1
fi

# Verificar vari√°veis cr√≠ticas
if ! grep -q "JWT_SECRET" .env.production || grep -q "sua_chave_super_secreta" .env.production; then
    error "Configure JWT_SECRET em .env.production"
    exit 1
fi

if ! grep -q "NODE_ENV=production" .env.production; then
    error "NODE_ENV deve ser 'production' em .env.production"
    exit 1
fi

log "‚úÖ Vari√°veis de ambiente - OK"

# ======================================
# 2. LIMPEZA E PREPARA√á√ÉO
# ======================================

log "üßπ Limpando arquivos tempor√°rios..."

# Limpar cache e builds anteriores
rm -rf .next
rm -rf node_modules/.cache
rm -rf .turbo

# Limpar logs antigos
find . -name "*.log" -type f -delete

log "‚úÖ Limpeza conclu√≠da"

# ======================================
# 3. INSTALA√á√ÉO DE DEPEND√äNCIAS
# ======================================

log "üì¶ Instalando depend√™ncias..."

# Verificar se pnpm est√° instalado
if command -v pnpm &> /dev/null; then
    log "Usando pnpm..."
    pnpm install --frozen-lockfile
else
    log "Usando npm..."
    npm ci
fi

log "‚úÖ Depend√™ncias instaladas"

# ======================================
# 4. VERIFICA√á√ïES DE QUALIDADE
# ======================================

log "üîç Executando verifica√ß√µes de qualidade..."

# Lint
if command -v pnpm &> /dev/null; then
    pnpm lint
else
    npm run lint
fi

log "‚úÖ Lint - OK"

# Type check
if command -v pnpm &> /dev/null; then
    pnpm type-check
else
    npm run type-check
fi

log "‚úÖ Type check - OK"

# ======================================
# 5. BUILD DE PRODU√á√ÉO
# ======================================

log "üèóÔ∏è  Gerando build de produ√ß√£o..."

# Build
if command -v pnpm &> /dev/null; then
    pnpm build
else
    npm run build
fi

log "‚úÖ Build conclu√≠do"

# ======================================
# 6. TESTES DE PRODU√á√ÉO
# ======================================

log "üß™ Executando testes de produ√ß√£o..."

# Testar se o build funciona
if command -v pnpm &> /dev/null; then
    timeout 30s pnpm start &
else
    timeout 30s npm start &
fi

PID=$!
sleep 10

# Verificar se o servidor est√° rodando
if curl -f http://localhost:3000 > /dev/null 2>&1; then
    log "‚úÖ Servidor de produ√ß√£o - OK"
    kill $PID 2>/dev/null || true
else
    error "‚ùå Servidor de produ√ß√£o falhou"
    kill $PID 2>/dev/null || true
    exit 1
fi

# ======================================
# 7. OTIMIZA√á√ïES DE PRODU√á√ÉO
# ======================================

log "‚ö° Aplicando otimiza√ß√µes de produ√ß√£o..."

# Criar diret√≥rio de logs se n√£o existir
mkdir -p logs

# Configurar permiss√µes
chmod 755 .next
chmod 644 .env.production

log "‚úÖ Otimiza√ß√µes aplicadas"

# ======================================
# 8. BACKUP E VERSIONAMENTO
# ======================================

log "üíæ Criando backup..."

# Criar tag de vers√£o
VERSION=$(date +'%Y%m%d_%H%M%S')
git tag "v$VERSION" 2>/dev/null || warn "Tag j√° existe ou git n√£o configurado"

# Backup do .env
cp .env.production "backup_env_$VERSION.env"

log "‚úÖ Backup criado: backup_env_$VERSION.env"

# ======================================
# 9. DEPLOY FINAL
# ======================================

log "üöÄ Deploy finalizado com sucesso!"

# Informa√ß√µes finais
echo ""
echo "=========================================="
echo "üéâ DEPLOY CONCLU√çDO COM SUCESSO!"
echo "=========================================="
echo ""
echo "üìä Informa√ß√µes do Deploy:"
echo "   ‚Ä¢ Vers√£o: $VERSION"
echo "   ‚Ä¢ Data: $(date)"
echo "   ‚Ä¢ Node.js: $(node -v)"
echo "   ‚Ä¢ Build: .next/"
echo ""
echo "üåê URLs de Acesso:"
echo "   ‚Ä¢ Site: https://reserveiviagens.com.br"
echo "   ‚Ä¢ Admin: https://reserveiviagens.com.br/admin"
echo "   ‚Ä¢ Login: https://reserveiviagens.com.br/admin/login"
echo ""
echo "üîß Pr√≥ximos Passos:"
echo "   1. Configure o servidor web (nginx/apache)"
echo "   2. Configure SSL/HTTPS"
echo "   3. Configure o banco de dados"
echo "   4. Configure os gateways de pagamento"
echo "   5. Teste todas as funcionalidades"
echo ""
echo "üìû Suporte:"
echo "   ‚Ä¢ Email: suporte@reserveiviagens.com.br"
echo "   ‚Ä¢ WhatsApp: (64) 9 9999-9999"
echo ""
echo "=========================================="

# ======================================
# 10. COMANDOS √öTEIS
# ======================================

echo ""
echo "üîß Comandos √öteis:"
echo "   ‚Ä¢ Iniciar servidor: npm start"
echo "   ‚Ä¢ Ver logs: tail -f logs/app.log"
echo "   ‚Ä¢ Backup: ./scripts/backup.sh"
echo "   ‚Ä¢ Monitor: ./scripts/monitor.sh"
echo ""

log "‚úÖ Deploy conclu√≠do! Sistema pronto para produ√ß√£o." 