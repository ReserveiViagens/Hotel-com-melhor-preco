const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testEtapa1() {
  console.log('üß™ Testando Etapa 1 - Sistema Modular Reativo + Login Social\n');

  try {
    // 1. Testar m√≥dulos no banco de dados
    console.log('1Ô∏è‚É£ Testando m√≥dulos no banco de dados...');
    const modules = await prisma.module.findMany({
      orderBy: { order: 'asc' }
    });
    
    console.log(`   ‚úÖ ${modules.length} m√≥dulos encontrados:`);
    modules.forEach(module => {
      console.log(`      - ${module.icon} ${module.label} (${module.active ? 'Ativo' : 'Inativo'})`);
    });

    // 2. Testar m√≥dulos ativos
    console.log('\n2Ô∏è‚É£ Testando m√≥dulos ativos...');
    const activeModules = modules.filter(m => m.active);
    console.log(`   ‚úÖ ${activeModules.length} m√≥dulos ativos:`);
    activeModules.forEach(module => {
      console.log(`      - ${module.icon} ${module.label}`);
    });

    // 3. Testar configura√ß√µes dos m√≥dulos
    console.log('\n3Ô∏è‚É£ Testando configura√ß√µes dos m√≥dulos...');
    const modulesWithConfig = await prisma.module.findMany();
    
    console.log(`   ‚úÖ ${modulesWithConfig.length} m√≥dulos com configura√ß√µes:`);
    modulesWithConfig.forEach(module => {
      const hasConfig = module.config && typeof module.config === 'object' && Object.keys(module.config).length > 0;
      console.log(`      - ${module.icon} ${module.label}: ${hasConfig ? '‚úÖ Configurado' : '‚ùå Sem configura√ß√£o'}`);
    });

    // 4. Testar estrutura de autentica√ß√£o social
    console.log('\n4Ô∏è‚É£ Testando estrutura de autentica√ß√£o social...');
    const socialAccounts = await prisma.socialAccount.findMany();
    console.log(`   ‚úÖ ${socialAccounts.length} contas sociais registradas`);

    const socialAuthLogs = await prisma.socialAuthLog.findMany();
    console.log(`   ‚úÖ ${socialAuthLogs.length} logs de autentica√ß√£o social`);

    // 5. Testar usu√°rios
    console.log('\n5Ô∏è‚É£ Testando usu√°rios...');
    const users = await prisma.user.findMany();
    console.log(`   ‚úÖ ${users.length} usu√°rios registrados`);

    const usersWithSocial = await prisma.user.findMany({
      include: {
        socialAccounts: true
      }
    });
    
    const usersWithSocialAccounts = usersWithSocial.filter(u => u.socialAccounts.length > 0);
    console.log(`   ‚úÖ ${usersWithSocialAccounts.length} usu√°rios com contas sociais`);

    // 6. Resumo final
    console.log('\nüéØ RESUMO DA ETAPA 1:');
    console.log(`   üìä Total de m√≥dulos: ${modules.length}`);
    console.log(`   ‚úÖ M√≥dulos ativos: ${activeModules.length}`);
    console.log(`   üîê Contas sociais: ${socialAccounts.length}`);
    console.log(`   üë• Usu√°rios: ${users.length}`);
    console.log(`   üìù Logs de auth: ${socialAuthLogs.length}`);

    // 7. Verificar se h√° m√≥dulos essenciais
    const essentialModules = ['hoteis', 'ingressos', 'atracoes'];
    const missingModules = essentialModules.filter(name => 
      !modules.some(m => m.name === name)
    );

    if (missingModules.length > 0) {
      console.log(`\n‚ö†Ô∏è  M√≥dulos essenciais faltando: ${missingModules.join(', ')}`);
    } else {
      console.log('\n‚úÖ Todos os m√≥dulos essenciais est√£o presentes!');
    }

    // 8. Verificar configura√ß√µes de cores
    console.log('\n6Ô∏è‚É£ Verificando configura√ß√µes de cores...');
    modulesWithConfig.forEach(module => {
      if (module.config && module.config.colors) {
        console.log(`   üé® ${module.label}: ${module.config.colors.primary}`);
      }
    });

    console.log('\nüéâ Teste da Etapa 1 conclu√≠do com sucesso!');
    console.log('\nüìã Pr√≥ximos passos:');
    console.log('   1. Acesse http://localhost:3000/admin/configuracoes');
    console.log('   2. V√° para a aba "M√≥dulos & Integra√ß√µes"');
    console.log('   3. Configure as chaves das APIs sociais');
    console.log('   4. Teste o login social em http://localhost:3000/login');
    console.log('   5. Verifique se o header mostra apenas m√≥dulos ativos');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testEtapa1(); 