#!/bin/bash

# ========================================
# SCRIPT DE AN√ÅLISE DE PERFORMANCE - RESERVEI VIAGENS
# ========================================

set -e

echo "üìä Iniciando an√°lise completa de performance..."

# ========================================
# CONFIGURA√á√ïES
# ========================================
SITE_URL="${SITE_URL:-http://localhost:3000}"
OUTPUT_DIR="performance-reports"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# Criar diret√≥rio de relat√≥rios
mkdir -p "$OUTPUT_DIR"

# ========================================
# AN√ÅLISE DE BUNDLE
# ========================================
echo "üì¶ Analisando bundle da aplica√ß√£o..."

# Analisar bundle
npm run build
npx @next/bundle-analyzer .next/static/chunks --out-dir "$OUTPUT_DIR/bundle-analysis-$TIMESTAMP"

echo "‚úÖ An√°lise de bundle conclu√≠da"

# ========================================
# AN√ÅLISE DE LIGHTHOUSE
# ========================================
echo "üèÜ Executando Lighthouse..."

# Lighthouse para diferentes p√°ginas
PAGES=("/" "/hoteis" "/atracoes" "/promocoes" "/contato")

for page in "${PAGES[@]}"; do
    echo "üìÑ Analisando p√°gina: $page"
    
    npx lighthouse "$SITE_URL$page" \
        --output=json \
        --output-path="$OUTPUT_DIR/lighthouse-$page-$TIMESTAMP.json" \
        --chrome-flags="--headless --no-sandbox --disable-gpu" \
        --only-categories=performance,accessibility,best-practices,seo
done

echo "‚úÖ An√°lise Lighthouse conclu√≠da"

# ========================================
# AN√ÅLISE DE REDE
# ========================================
echo "üåê Analisando performance de rede..."

# Teste de velocidade de download
curl -w "@curl-format.txt" -o /dev/null -s "$SITE_URL" > "$OUTPUT_DIR/network-test-$TIMESTAMP.txt"

# Teste de lat√™ncia
ping -c 10 $(echo "$SITE_URL" | sed 's|https?://||' | sed 's|/.*||') > "$OUTPUT_DIR/latency-test-$TIMESTAMP.txt"

echo "‚úÖ An√°lise de rede conclu√≠da"

# ========================================
# AN√ÅLISE DE BANCO DE DADOS
# ========================================
echo "üóÑÔ∏è Analisando performance do banco de dados..."

# Executar queries de teste
node scripts/test-database-performance.js > "$OUTPUT_DIR/database-performance-$TIMESTAMP.txt"

echo "‚úÖ An√°lise de banco conclu√≠da"

# ========================================
# AN√ÅLISE DE CACHE
# ========================================
echo "üíæ Analisando performance de cache..."

# Testar hit rate do cache
node scripts/test-cache-performance.js > "$OUTPUT_DIR/cache-performance-$TIMESTAMP.txt"

echo "‚úÖ An√°lise de cache conclu√≠da"

# ========================================
# AN√ÅLISE DE MEM√ìRIA
# ========================================
echo "üß† Analisando uso de mem√≥ria..."

# Monitorar uso de mem√≥ria durante testes
node scripts/memory-analysis.js > "$OUTPUT_DIR/memory-analysis-$TIMESTAMP.txt"

echo "‚úÖ An√°lise de mem√≥ria conclu√≠da"

# ========================================
# AN√ÅLISE DE CPU
# ========================================
echo "üñ•Ô∏è Analisando uso de CPU..."

# Monitorar uso de CPU durante testes
node scripts/cpu-analysis.js > "$OUTPUT_DIR/cpu-analysis-$TIMESTAMP.txt"

echo "‚úÖ An√°lise de CPU conclu√≠da"

# ========================================
# AN√ÅLISE DE IMAGENS
# ========================================
echo "üñºÔ∏è Analisando otimiza√ß√£o de imagens..."

# Verificar tamanho e formato das imagens
find public/images -name "*.jpg" -o -name "*.png" -o -name "*.webp" | head -20 | while read img; do
    echo "Imagem: $img"
    file "$img"
    du -h "$img"
done > "$OUTPUT_DIR/image-analysis-$TIMESTAMP.txt"

echo "‚úÖ An√°lise de imagens conclu√≠da"

# ========================================
# AN√ÅLISE DE SEO
# ========================================
echo "üîç Analisando SEO..."

# Verificar meta tags
curl -s "$SITE_URL" | grep -E "<title>|<meta" > "$OUTPUT_DIR/seo-analysis-$TIMESTAMP.txt"

# Verificar sitemap
curl -s "$SITE_URL/sitemap.xml" > "$OUTPUT_DIR/sitemap-$TIMESTAMP.xml"

echo "‚úÖ An√°lise de SEO conclu√≠da"

# ========================================
# AN√ÅLISE DE ACESSIBILIDADE
# ========================================
echo "‚ôø Analisando acessibilidade..."

# Testar com axe-core
npx axe "$SITE_URL" --save "$OUTPUT_DIR/accessibility-$TIMESTAMP.json"

echo "‚úÖ An√°lise de acessibilidade conclu√≠da"

# ========================================
# AN√ÅLISE DE SEGURAN√áA
# ========================================
echo "üõ°Ô∏è Analisando seguran√ßa..."

# Verificar headers de seguran√ßa
curl -I "$SITE_URL" > "$OUTPUT_DIR/security-headers-$TIMESTAMP.txt"

# Verificar vulnerabilidades
npm audit --json > "$OUTPUT_DIR/security-audit-$TIMESTAMP.json"

echo "‚úÖ An√°lise de seguran√ßa conclu√≠da"

# ========================================
# AN√ÅLISE DE MOBILE
# ========================================
echo "üì± Analisando performance mobile..."

# Lighthouse para mobile
npx lighthouse "$SITE_URL" \
    --output=json \
    --output-path="$OUTPUT_DIR/lighthouse-mobile-$TIMESTAMP.json" \
    --chrome-flags="--headless --no-sandbox --disable-gpu" \
    --only-categories=performance \
    --emulated-form-factor=mobile

echo "‚úÖ An√°lise mobile conclu√≠da"

# ========================================
# GERAR RELAT√ìRIO FINAL
# ========================================
echo "üìã Gerando relat√≥rio final..."

cat > "$OUTPUT_DIR/performance-report-$TIMESTAMP.md" << EOF
# Relat√≥rio de Performance - Reservei Viagens
**Data:** $(date)
**URL:** $SITE_URL

## üìä Resumo Executivo

### M√©tricas Principais
- **Performance Score:** [Verificar Lighthouse]
- **First Contentful Paint:** [Verificar Lighthouse]
- **Largest Contentful Paint:** [Verificar Lighthouse]
- **Cumulative Layout Shift:** [Verificar Lighthouse]
- **First Input Delay:** [Verificar Lighthouse]

### Recomenda√ß√µes
1. **Otimiza√ß√µes de Imagem:** [Verificar an√°lise de imagens]
2. **Otimiza√ß√µes de Bundle:** [Verificar an√°lise de bundle]
3. **Otimiza√ß√µes de Cache:** [Verificar an√°lise de cache]
4. **Otimiza√ß√µes de Banco:** [Verificar an√°lise de banco]

## üìÅ Arquivos de An√°lise
- Bundle Analysis: \`bundle-analysis-$TIMESTAMP/\`
- Lighthouse Reports: \`lighthouse-*-$TIMESTAMP.json\`
- Network Tests: \`network-test-$TIMESTAMP.txt\`
- Database Performance: \`database-performance-$TIMESTAMP.txt\`
- Cache Performance: \`cache-performance-$TIMESTAMP.txt\`
- Memory Analysis: \`memory-analysis-$TIMESTAMP.txt\`
- CPU Analysis: \`cpu-analysis-$TIMESTAMP.txt\`
- Image Analysis: \`image-analysis-$TIMESTAMP.txt\`
- SEO Analysis: \`seo-analysis-$TIMESTAMP.txt\`
- Accessibility: \`accessibility-$TIMESTAMP.json\`
- Security Audit: \`security-audit-$TIMESTAMP.json\`
- Mobile Performance: \`lighthouse-mobile-$TIMESTAMP.json\`

## üöÄ Pr√≥ximos Passos
1. Revisar relat√≥rios detalhados
2. Implementar otimiza√ß√µes recomendadas
3. Re-executar an√°lise ap√≥s otimiza√ß√µes
4. Monitorar performance continuamente
EOF

echo "‚úÖ Relat√≥rio final gerado: $OUTPUT_DIR/performance-report-$TIMESTAMP.md"

# ========================================
# ENVIAR NOTIFICA√á√ïES
# ========================================
echo "üì¢ Enviando notifica√ß√µes..."

if [ -n "$SLACK_WEBHOOK_URL" ]; then
    curl -X POST "$SLACK_WEBHOOK_URL" \
        -H "Content-Type: application/json" \
        -d "{
            \"text\": \"üìä An√°lise de Performance Conclu√≠da\",
            \"attachments\": [{
                \"color\": \"good\",
                \"fields\": [
                    {\"title\": \"Projeto\", \"value\": \"Reservei Viagens\", \"short\": true},
                    {\"title\": \"Timestamp\", \"value\": \"$(date)\", \"short\": true},
                    {\"title\": \"Relat√≥rios\", \"value\": \"$OUTPUT_DIR/\", \"short\": false}
                ]
            }]
        }"
fi

# ========================================
# FINALIZA√á√ÉO
# ========================================
echo "üéâ An√°lise de performance conclu√≠da!"
echo "üìÅ Relat√≥rios salvos em: $OUTPUT_DIR/"
echo "üìã Relat√≥rio principal: $OUTPUT_DIR/performance-report-$TIMESTAMP.md"
echo "‚è∞ Dura√ß√£o: $(($SECONDS / 60)) minutos"

echo "‚úÖ Script de an√°lise de performance finalizado" 